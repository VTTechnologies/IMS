using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using IMSBLL.EntityModel;
using IMSBLL.DAL;
using System.Configuration;

namespace IMS.PurchaseFolder
{
    public partial class PurchaseReturn1 : System.Web.UI.Page
    {
        /// <summary>
        /// Objects That are used in coding
        /// </summary>
        IMS2Entities context = new IMS2Entities();
        SqlHelper helper = new SqlHelper();
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["TestDBConnection"].ConnectionString);
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (ViewState["Details"] == null)
                {
                    DataTable dataTable = new DataTable();

                    dataTable.Columns.Add("purchasedetails_id");
                    dataTable.Columns.Add("Product_id");
                    dataTable.Columns.Add("batch_id");
                    dataTable.Columns.Add("unit_id");
                    dataTable.Columns.Add("tax_id");
                    dataTable.Columns.Add("amount");
                    dataTable.Columns.Add("dicount_amt");
                    dataTable.Columns.Add("tax_amt");
                    dataTable.Columns.Add("purchase_rate");
                    dataTable.Columns.Add("sale_rate");
                    dataTable.Columns.Add("quantity");
                    dataTable.Columns.Add("product_name");
                    dataTable.Columns.Add("unit_name");
                    dataTable.Columns.Add("batch_name");
                    dataTable.Columns.Add("tax_percentage");
                    ViewState["Details"] = dataTable;
                }
                this.BindGrid();
                ddlpaymentmodebind();
            }
        }
        /// <summary>
        /// All The Methods
        /// </summary>
        
        #region
        [System.Web.Services.WebMethod]
        public static string CheckDouble(string useroremail, string productid)
        {
            try
            {
                if (HttpContext.Current.Session["company_id"] != null)
                {
                    SqlHelper helper = new SqlHelper();
                    int data = helper.checkusersdata24(Convert.ToInt32(HttpContext.Current.Session["company_id"]), Convert.ToInt32(productid));

                    if (data < Convert.ToInt32(useroremail))
                    {

                        return "true";
                    }
                    else
                    {
                        return "false";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
            return "true";
        }
       
        
        public bool productvalid(int productid, decimal quantity,int count)
        {
            decimal totalqty = 0;
            decimal availableqty = 0;
            
            decimal q1 = Convert.ToDecimal(Session["quant"]);
            for (int i = 0; i <= gvpurchasedetails.Rows.Count - 1; i++)
            {
                int pid = Convert.ToInt32(gvpurchasedetails.Rows[i].Cells[2].Text);
                decimal qty = Convert.ToDecimal(gvpurchasedetails.Rows[i].Cells[5].Text);

                if (pid == productid)
                {
                    if (count == 0)
                    {
                        totalqty = qty + quantity + totalqty;
                    }
                   
                }
            }

            if (q1 < totalqty || q1< quantity)
            {
                lblcheckDoubleError.ForeColor = System.Drawing.Color.Red;
                lblcheckDoubleError.Text = "Out Of Stock";
                return false;
            }
            
            else
            {
                availableqty = q1 - quantity;
                lblcheckDoubleError.ForeColor = System.Drawing.Color.Green;
                lblcheckDoubleError.Text = "Avialable Quantity In Stock " + availableqty;
                return true;
            }
            // if(total > avali)

        }
        public void ddlpaymentmodebind()
        {
            int c_id = Convert.ToInt32(Session["company_id"]);
            List<tbl_paymentmode> cd = context.tbl_paymentmode.Where(x => x.status == true).ToList();
            ddlPaymentMode.DataTextField = "paymentmode_name";
            ddlPaymentMode.DataValueField = "paymentode_id";
            ddlPaymentMode.DataSource = cd;
            ddlPaymentMode.DataBind();
        }
        protected void BindGrid()
        {
            try
            {
                gvpurchasedetails.DataSource = (DataTable)ViewState["Details"];
                gvpurchasedetails.DataBind();
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }
        public void getpurchaseDetails()
        {
            Session["Purchase_id"] = txtPoNo.Text;
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "sp_SelectProductbyid";
            cmd.Parameters.AddWithValue("@purchsae_id", Convert.ToInt32(txtPoNo.Text));
            cmd.Connection = con;
            try
            {

                con.Open();
                DataSet ds = new DataSet();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                Session["table"] = ds.Tables[0];
                if (ds.Tables[0].Rows[0][0].ToString() == "Please Enter Proper Purhcase Order No")
                {
                    ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Please Enter Proper Purhcase Order No','False');", true);
                }
                else
                {
                    ddlproduct.DataTextField = "product_name";
                    ddlproduct.DataValueField = "product_id";
                    ddlproduct.DataSource = ds.Tables[0];
                    ddlproduct.DataBind();
                    ddlproduct.Items.Insert(0, new ListItem("--Select Product--", "0"));
                }
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
            }
            finally
            {
                con.Close();
                con.Dispose();
            }
        }

        public void calculation(decimal amt, decimal tax, decimal dis)
        {
            decimal tot = 0;
            decimal tottax = 0;
            decimal dec = 0;
            decimal gtot = 0;
            tot = Convert.ToDecimal(lblsubtotal.Text) + amt;
            lblsubtotal.Text = tot.ToString("0.##");
            tottax = Convert.ToDecimal(lblTaxAmount.Text) + tax;
            lblTaxAmount.Text = tottax.ToString("0.##");
            dec = Convert.ToDecimal(lblDiscountAmt.Text) + dis;
            lblDiscountAmt.Text = dec.ToString("0.##");

            gtot = Convert.ToDecimal(lblsubtotal.Text) + (Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(lblDiscountAmt.Text));
            lblGrandTotal.Text = gtot.ToString("0.##");


        }

        public void clr()
        {

            ddlproduct.SelectedIndex = 0;
            txtquantity.Text = "";
        }

        public void updatecal()
        {
            decimal a1 = Convert.ToDecimal(lblsubtotal.Text) - Convert.ToDecimal(ViewState["subtot"]);
            decimal b1 = Convert.ToDecimal(lblDiscountAmt.Text) - Convert.ToDecimal(ViewState["discountamount"]);
            decimal c = Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(ViewState["taxamount"]);
            lblsubtotal.Text = a1.ToString();
            lblDiscountAmt.Text = b1.ToString();
            lblTaxAmount.Text = c.ToString();
            decimal d = (a1 + c) - b1;
            lblGrandTotal.Text = d.ToString();
        }
        #endregion


        /// <summary>
        /// All The Events That are used in this page
        /// </summary>
      
        #region
        protected void btnSearch_Click(object sender, EventArgs e)
        {
            ddlproduct.Items.Clear();
            getpurchaseDetails();
        }

        protected void btnAdd_Click(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            dt = (DataTable)Session["table"];
            DataView dv = new DataView(dt);
            dv.RowFilter = "product_id =" + Convert.ToInt32(ddlproduct.SelectedValue);
            DataTable dt1 = new DataTable();
            dt1 = dv.ToTable();

            try
            {
                if (hd.Value != "true")
                {


                    if (Convert.ToInt32(txtquantity.Text) > Convert.ToInt32(dt1.Rows[0]["quantity"].ToString()))
                    {
                        ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Please Enter a Quantity Below This ','False');", true);
                        return;
                    }
                    else
                    {
                        int purchase_details = Convert.ToInt32(dt.Rows[0]["purchasedetails_id"].ToString());
                        string batch = dt.Rows[0]["batch_name"].ToString();
                        string product_name = ddlproduct.SelectedItem.Text.Trim();
                        dt.Rows[0]["quantity"] = txtquantity.Text;
                        int tax_id = Convert.ToInt32(dt.Rows[0]["tax_id"]);
                        int b = Convert.ToInt32(dt.Rows[0]["batch_id"]);
                        int unit_id = Convert.ToInt32(dt.Rows[0]["unit_id"]);
                        int p = Convert.ToInt32(ddlproduct.SelectedValue);
                        string tax = dt.Rows[0]["tax_percentage"].ToString();
                        string unit_name = dt.Rows[0]["unit_name"].ToString();
                        decimal SubTotal = Convert.ToDecimal(txtquantity.Text) * Convert.ToDecimal(dt.Rows[0]["purchase_rate"].ToString());
                        decimal a = SubTotal / 100;
                        decimal discount_percent = decimal.Parse(dt.Rows[0]["dicount_amt"].ToString()) * 100 / decimal.Parse(dt.Rows[0]["amount"].ToString());
                        decimal discountamt = a * Convert.ToDecimal(discount_percent.ToString("0.##"));
                        decimal tax_amount = a * decimal.Parse(tax);
                        decimal price = Convert.ToDecimal(dt.Rows[0]["purchase_rate"]);
                        decimal salesp = Convert.ToDecimal(dt.Rows[0]["sale_rate"]);
                        decimal quantity = Convert.ToDecimal(txtquantity.Text);

                        if (productvalid(p, quantity,0) != false)
                        {
                            DataTable tbl = (DataTable)ViewState["Details"];
                            tbl.Rows.Add(purchase_details, p, b, unit_id, tax_id, SubTotal, discountamt, tax_amount, price, salesp, quantity, product_name, unit_name, batch, tax);
                            ViewState["Details"] = tbl;
                            this.BindGrid();
                            clr();
                            calculation(SubTotal, tax_amount, discountamt);

                            txtBalanceAmt.Enabled = true;
                            txtGivenAmt.Enabled = true;
                        }
                    }
                }
                else
                {
                    lblcheckDoubleError.ForeColor = System.Drawing.Color.Red;
                    lblcheckDoubleError.Text = "Insufficient  Quantity";
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
                //Do Logging
            }

        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            SqlTransaction transaction;
            SqlCommand cmd = new SqlCommand();

            cmd.Connection = con;
            cmd.CommandTimeout = 600000;
            con.Open();
            transaction = con.BeginTransaction("Transaction");
            cmd.Transaction = transaction;
            try
            {
                string date = DateTime.Today.ToString();
                string user = Session["UserID"].ToString();
                int c_id = Convert.ToInt32(Session["company_id"]);
                int b_id = Convert.ToInt32(Session["branch_id"]);
                int party_id;
                int a = Convert.ToInt32(Session["Purchase_id"]);
                if (a != null)
                {
                    tbl_purchase p = new tbl_purchase();
                    p.company_id = c_id;
                    p.purchase_id = a;
                    p.All2(p);
                    party_id = Convert.ToInt32(p.party_id);

                }
                else
                {
                    ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Please Enter Purchase No','False');", true);
                    return;
                }


                int Purchase_id = Convert.ToInt32(a);
                if (Purchase_id != 0)
                {

                    decimal tax_amount = Convert.ToDecimal(lblTaxAmount.Text);
                    decimal sub_total = Convert.ToDecimal(lblsubtotal.Text);
                    decimal discount = Convert.ToDecimal(lblDiscountAmt.Text);
                    decimal grandtotal = Convert.ToDecimal(lblGrandTotal.Text);

                    //Purchase Return Main Table Insertion Code
                    cmd.CommandText = "sp_insertpurchasereturnmain";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Purchase_id", Purchase_id);
                    cmd.Parameters.AddWithValue("@branch_id", b_id);
                    cmd.Parameters.AddWithValue("@company_id", c_id);
                    cmd.Parameters.AddWithValue("@total_tax", tax_amount);
                    cmd.Parameters.AddWithValue("@actual_amount", sub_total);
                    cmd.Parameters.AddWithValue("@grand_total", grandtotal);
                    cmd.Parameters.AddWithValue("@total_discount ", discount);
                    cmd.Parameters.AddWithValue("@created_by", user);
                    cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                    cmd.Parameters.Add("@purchasereturnmain_id", SqlDbType.Int);
                    cmd.Parameters["@purchasereturnmain_id"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    Session["prmid"] = Convert.ToInt32(cmd.Parameters["@purchasereturnmain_id"].Value);
                    cmd.Parameters.Clear();
                }


                int mcid = Convert.ToInt32(Session["prmid"]);

                for (int i = 0; i <= gvpurchasedetails.Rows.Count - 1; i++)
                {
                    GridViewRow row = gvpurchasedetails.Rows[i];
                    //Purchase Details Saving Code Start Here
                    int salesedetail_id = Convert.ToInt32(row.Cells[12].Text);
                    if (salesedetail_id != 0)
                    {
                        cmd.CommandText = "sp_insert_purchase_return";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@purchasereturnmain_id", mcid);
                        cmd.Parameters.AddWithValue("@purchasedetails_id", salesedetail_id);
                        cmd.Parameters.AddWithValue("@product_id", Convert.ToInt32(row.Cells[2].Text));
                        cmd.Parameters.AddWithValue("@batch_id", Convert.ToInt32(row.Cells[4].Text));
                        cmd.Parameters.AddWithValue("@tax_amt", Convert.ToDecimal(row.Cells[10].Text));
                        cmd.Parameters.AddWithValue("@quantity", Convert.ToDecimal(row.Cells[5].Text));
                        cmd.Parameters.AddWithValue("@amount", Convert.ToDecimal(row.Cells[11].Text));
                        cmd.Parameters.AddWithValue("@created_by", user);
                        cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                        cmd.Connection = con;
                        cmd.CommandTimeout = 600000;
                        cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                    }

                    // Stock & Stock Transaction Data Saving Code end

                }




                cmd.Parameters.Clear();

                cmd.CommandText = "sp_InsertMonyTransaction";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@company_id", c_id);
                cmd.Parameters.AddWithValue("@branch_id", b_id);
                cmd.Parameters.AddWithValue("@party_id", party_id);
                cmd.Parameters.AddWithValue("@given_amt", txtGivenAmt.Text);
                cmd.Parameters.AddWithValue("@grand_total", lblGrandTotal.Text);
                cmd.Parameters.AddWithValue("@balance_amt", txtBalanceAmt.Text);
                cmd.Parameters.AddWithValue("@in_out", "In");
                cmd.Parameters.AddWithValue("@paymentmode_id", ddlPaymentMode.SelectedValue);
                cmd.Parameters.AddWithValue("@transaction_typ", "Purchase Return");
                cmd.Parameters.AddWithValue("@transactio_type_id", mcid);
                cmd.Parameters.AddWithValue("@created_by", user);
                cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                cmd.Connection = con;
                cmd.CommandTimeout = 600000;
                cmd.ExecuteNonQuery();
                transaction.Commit();
                con.Close();

                ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Saved Successfully','True');", true);


            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
                //Do Logging
            }
            finally
            {
                if (con != null && con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        protected void ddlproduct_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                lblcheckDoubleError.Text = string.Empty;
                int c_id = Convert.ToInt32(Session["company_id"]);
                int p_id = Convert.ToInt32(ddlproduct.SelectedValue);
                int data = helper.checkusersdata24(Convert.ToInt32(HttpContext.Current.Session["company_id"]), Convert.ToInt32(p_id));
                Session["quant"] = data;



                lblcheckDoubleError.ForeColor = System.Drawing.Color.Green;
                lblcheckDoubleError.Text = "Avialable Quantity In Stock " + data;
                UpdatePanel1.Update();
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void gvpurchasedetails_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {


                if (e.CommandName == "Delete row")
                {

                    GridViewRow grv = ((GridViewRow)((ImageButton)e.CommandSource).NamingContainer);

                    ViewState["subtot"] = (grv.Cells[11].Text);
                    ViewState["discountamount"] = (grv.Cells[8].Text);
                    ViewState["taxamount"] = (grv.Cells[10].Text);

                    int rowIndex = grv.RowIndex;


                    ViewState["id"] = rowIndex;

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "openModal();", true);
                   // ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "none", "<script> $('#myModal').modal('show');</script>", false);

                }
                else if (e.CommandName == "Update Row")
                {
                    GridViewRow grv = ((GridViewRow)((ImageButton)e.CommandSource).NamingContainer);
                    ViewState["id"] = grv.RowIndex;
                    //ddlproduct.SelectedIndex = Convert.ToInt32(grv.Cells[2].Text);
                    ddlproduct.SelectedValue = grv.Cells[2].Text.ToString();
                    txtquantity.Text = grv.Cells[5].Text.ToString();
                    btnUpdate.Visible = true;
                    btnAdd.Visible = false;

                    ViewState["subtot"] = (grv.Cells[11].Text);
                    ViewState["discountamount"] = (grv.Cells[8].Text);
                    ViewState["taxamount"] = (grv.Cells[10].Text);

                }



            }

            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        

        protected void btnUpdate_Click(object sender, EventArgs e)
        {

            DataTable dt = new DataTable();
            dt = (DataTable)Session["table"];
            try
            {



                if (ViewState["Details"] != "")
                {
                   

                    int purchase_details = Convert.ToInt32(dt.Rows[0]["purchasedetails_id"].ToString());
                    string batch = dt.Rows[0]["batch_name"].ToString();
                    string product_name = ddlproduct.SelectedItem.Text.Trim();
                    dt.Rows[0]["quantity"] = txtquantity.Text;
                    int tax_id = Convert.ToInt32(dt.Rows[0]["tax_id"]);
                    int b = Convert.ToInt32(dt.Rows[0]["batch_id"]);
                    int unit_id = Convert.ToInt32(dt.Rows[0]["unit_id"]);
                    int p = Convert.ToInt32(ddlproduct.SelectedValue);
                    string tax = dt.Rows[0]["tax_percentage"].ToString();
                    string unit_name = dt.Rows[0]["unit_name"].ToString();
                    decimal SubTotal = Convert.ToDecimal(txtquantity.Text) * Convert.ToDecimal(dt.Rows[0]["purchase_rate"].ToString());
                    decimal a = SubTotal / 100;
                    decimal discount_percent = decimal.Parse(dt.Rows[0]["dicount_amt"].ToString()) * 100 / decimal.Parse(dt.Rows[0]["amount"].ToString());
                    decimal discountamt = a * Convert.ToDecimal(discount_percent.ToString("0.##"));
                    decimal tax_amount = a * decimal.Parse(tax);
                    decimal price = Convert.ToDecimal(dt.Rows[0]["purchase_rate"]);
                    decimal salesp = Convert.ToDecimal(dt.Rows[0]["sale_rate"]);
                    decimal quantity = Convert.ToDecimal(txtquantity.Text);

                    if(productvalid(p,quantity,1) != false)
                    {
                        DataTable dt1 = ViewState["Details"] as DataTable;
                        int row = Convert.ToInt32(ViewState["id"]);
                        dt1.Rows[row][0] = purchase_details;
                        dt1.Rows[row][1] = p;
                        dt1.Rows[row][2] = b;
                        dt1.Rows[row][3] = unit_id;
                        dt1.Rows[row][4] = tax_id;
                        dt1.Rows[row][5] = SubTotal;
                        dt1.Rows[row][6] = discountamt;
                        dt1.Rows[row][7] = tax_amount;
                        dt1.Rows[row][8] = price;
                        dt1.Rows[row][9] = salesp;
                        dt1.Rows[row][10] = quantity;
                        dt1.Rows[row][11] = product_name;
                        dt1.Rows[row][12] = unit_name;
                        dt1.Rows[row][13] = batch;
                        dt1.Rows[row][14] = tax;

                        gvpurchasedetails.DataSource = dt1;
                        gvpurchasedetails.DataBind();

                        clr();
                        updatecal();
                        calculation(SubTotal, tax_amount, discountamt);

                        btnAdd.Visible = true;
                        btnUpdate.Visible = false;
                    }



                }



            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void btnOk_Click(object sender, EventArgs e)
        {
            try
            {
                if (ViewState["total"] != "" && ViewState["dis"] != "" && ViewState["tax"] != "")
                {
                    updatecal();

                    if (ViewState["Details"] != "")
                    {

                        DataTable dt = ViewState["Details"] as DataTable;
                        int row = Convert.ToInt32(ViewState["id"]);
                        dt.Rows[row].Delete();
                        lblcheckDoubleError.Text = string.Empty;
                        gvpurchasedetails.DataSource = dt;
                        gvpurchasedetails.DataBind();
                    }

                 
                }

                else
                {
                    lblError.Text = "Row is empty";
                }
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                Response.Redirect("PurchaseReturn1.aspx", false);
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void txtGivenAmt_TextChanged(object sender, EventArgs e)
        {
            try
            {
                //decimal a = Convert.ToDecimal(lblGrandTotal.Text) - Convert.ToDecimal(txtGivenAmt.Text);
                //txtBalanceAmt.Text = a.ToString();
                decimal a=Convert.ToDecimal(lblGrandTotal.Text);
                decimal b= Convert.ToDecimal(txtGivenAmt.Text);
                if ( a<b)
                {
                    txtGivenAmt.Text = lblGrandTotal.Text;
                    txtBalanceAmt.Text = "0";
                }

                else
                {
                    decimal c = Convert.ToDecimal(lblGrandTotal.Text) - Convert.ToDecimal(txtGivenAmt.Text);
                    txtBalanceAmt.Text = c.ToString();
                }
                UpdatePanel1.Update();
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }
        #endregion
    }
}