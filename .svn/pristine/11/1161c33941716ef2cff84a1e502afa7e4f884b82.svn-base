using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using IMSBLL.EntityModel;
using IMSBLL.DAL;
using System.Configuration;

namespace IMS.SalesFolder
{
    public partial class SalesReturn : System.Web.UI.Page
    {
        /// <summary>
        /// Objects That are used in coding
        /// </summary>
        IMS_TESTEntities context = new IMS_TESTEntities();
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["TestDBConnection"].ConnectionString);
        SqlHelper helper = new SqlHelper();
        int companyId = 0, branchId = 0, financialYearId = 0; string user_id = string.Empty;
        protected void Page_Load(object sender, EventArgs e)
        {
            SessionValue();
            if (!IsPostBack)
            {
                if (ViewState["Details"] == null)
                {
                    DataTable dataTable = new DataTable();

                    dataTable.Columns.Add("saledetails_id");
                    dataTable.Columns.Add("Product_id");
                    dataTable.Columns.Add("batch_id");
                    dataTable.Columns.Add("unit_id");
                    dataTable.Columns.Add("tax_id");
                    dataTable.Columns.Add("amount");
                    dataTable.Columns.Add("dicount_amt");
                    dataTable.Columns.Add("tax_amt");
                    dataTable.Columns.Add("sale_rate");
                    dataTable.Columns.Add("quantity");
                    dataTable.Columns.Add("product_name");
                    dataTable.Columns.Add("unit_name");
                    dataTable.Columns.Add("batch_name");
                    dataTable.Columns.Add("tax_percentage");
                    ViewState["Details"] = dataTable;
                }
                ddlpaymentmodebind();
            }
        }

        /// <summary>
        /// All The Methods That are used in coding
        /// </summary>
        

        #region Methods
        private void SessionValue()
        {
            if (Session["UserID"] == null || Session["UserID"] == null || Session["branch_id"] == null || Session["financialyear_id"] == null)
            {
                Response.Redirect("../Registration/Login.aspx");
            }
            user_id = Convert.ToString(Session["UserID"]);
            companyId = Convert.ToInt32(Session["company_id"]);
            branchId = Convert.ToInt32(Session["branch_id"]);
            financialYearId = Convert.ToInt32(Session["financialyear_id"]);
        }
        public void ddlpaymentmodebind()
        {
            List<tbl_paymentmode> cd = context.tbl_paymentmode.Where(x => x.status == true).ToList();
            ddlPaymentMode.DataTextField = "paymentmode_name";
            ddlPaymentMode.DataValueField = "paymentode_id";
            ddlPaymentMode.DataSource = cd;
            ddlPaymentMode.DataBind();
            //ddlPaymentMode.Items.Insert(0, new ListItem("Select Payment Mode", "0"));
        }
        public void savedcode()
        {
            SqlTransaction transaction;
            SqlCommand cmd = new SqlCommand();

            cmd.Connection = con;
            cmd.CommandTimeout = 600000;
            con.Open();
            transaction = con.BeginTransaction("Transaction");
            cmd.Transaction = transaction;
            try
            {
                string date = DateTime.Today.ToString();
                string user = Session["UserID"].ToString();
                int c_id = Convert.ToInt32(Session["company_id"]);
                int b_id = Convert.ToInt32(Session["branch_id"]);
                int count;
                int party_id;
                int a = Convert.ToInt32(txtSoNo.Text);
                if (a != null)
                {
                    tbl_sale p = new tbl_sale();
                    p.company_id = c_id;
                    p.sale_id = a;
                   // p.SaleInvoice(p);
                    party_id = Convert.ToInt32(p.party_id);

                }
                else
                {
                    ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Please Enter Purchase No','False');", true);
                    return;
                }


                int sale_id = Convert.ToInt32(txtSoNo.Text);
                if (sale_id != 0)
                {

                    decimal tax_amount = Convert.ToDecimal(lblTaxAmount.Text);
                    decimal sub_total = Convert.ToDecimal(lblsubtotal.Text);
                    decimal discount = Convert.ToDecimal(lblDiscountAmt.Text);
                    decimal grandtotal = Convert.ToDecimal(lblGrandTotal.Text);
                    cmd.CommandText = "sp_insertsalreturnmain";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sale_id", sale_id);
                    cmd.Parameters.AddWithValue("@branch_id", b_id);
                    cmd.Parameters.AddWithValue("@company_id", c_id);
                    cmd.Parameters.AddWithValue("@total_tax", tax_amount);
                    cmd.Parameters.AddWithValue("@actual_amount", sub_total);
                    cmd.Parameters.AddWithValue("@grand_total", grandtotal);
                    cmd.Parameters.AddWithValue("@total_discount", discount);
                    cmd.Parameters.AddWithValue("@created_by", user);
                    cmd.Parameters.AddWithValue("@created_date", DateTime.Now);
                    cmd.Parameters.Add("@salereturnmain_id", SqlDbType.Int);
                    cmd.Parameters["@salereturnmain_id"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    Session["prmid"] = Convert.ToInt32(cmd.Parameters["@salereturnmain_id"].Value);

                    cmd.Parameters.Clear();
                }


                int mcid = Convert.ToInt32(Session["prmid"]);


                foreach (GridViewRow row in gvsalesdetails.Rows)
                {
                    int salesedetail_id = Convert.ToInt32(row.Cells[9].Text);
                    if (salesedetail_id != 0)
                    {
                        cmd.CommandText = "sp_salereturn";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@sale_id", sale_id);
                        cmd.Parameters.AddWithValue("@saledetails_id", salesedetail_id);
                        cmd.Parameters.AddWithValue("@product_id", Convert.ToInt32(row.Cells[2].Text));
                        cmd.Parameters.AddWithValue("@batch_id", Convert.ToInt32(row.Cells[10].Text));
                        cmd.Parameters.AddWithValue("@tax_amt", Convert.ToDecimal(row.Cells[7].Text));
                        cmd.Parameters.AddWithValue("@dicount_amt", Convert.ToDecimal(row.Cells[5].Text));
                        cmd.Parameters.AddWithValue("@quantity", Convert.ToDecimal(row.Cells[3].Text));
                        cmd.Parameters.AddWithValue("@amount", Convert.ToDecimal(row.Cells[8].Text));
                        cmd.Parameters.AddWithValue("@price", Convert.ToDecimal(row.Cells[4].Text));
                        cmd.Parameters.AddWithValue("@created_by", user);
                        cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                        cmd.Connection = con;
                        cmd.CommandTimeout = 600000;
                        cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();

                    }

                }

                cmd.Parameters.Clear();

                cmd.CommandText = "sp_InsertMonyTransaction";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@company_id", c_id);
                cmd.Parameters.AddWithValue("@branch_id", b_id);
                cmd.Parameters.AddWithValue("@party_id", party_id);
                cmd.Parameters.AddWithValue("@given_amt", txtGivenAmt.Text);
                cmd.Parameters.AddWithValue("@grand_total", lblGrandTotal.Text);
                cmd.Parameters.AddWithValue("@balance_amt", txtBalanceAmt.Text);
                cmd.Parameters.AddWithValue("@in_out", "out");
                cmd.Parameters.AddWithValue("@paymentmode_id", ddlPaymentMode.SelectedValue);
                cmd.Parameters.AddWithValue("@transaction_typ", "Sale Return");
                cmd.Parameters.AddWithValue("@transactio_type_id", mcid);
                cmd.Parameters.AddWithValue("@created_by", Session["UserID"].ToString());
                cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                cmd.Connection = con;
                cmd.CommandTimeout = 600000;
                cmd.ExecuteNonQuery();
                transaction.Commit();
                con.Close();
                ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Saved Successfully','True');", true);
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
                //Do Logging
            }
            finally
            {
                if (con != null && con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public bool productvalid(int productid, decimal quantity, int count)
        {
            decimal totalqty = 0;
            decimal availableqty = 0;

            decimal q1 = Convert.ToDecimal(Session["quant"]);
            for (int i = 0; i <= gvsalesdetails.Rows.Count - 1; i++)
            {
                int pid = Convert.ToInt32(gvsalesdetails.Rows[i].Cells[2].Text);
                decimal qty = Convert.ToDecimal(gvsalesdetails.Rows[i].Cells[5].Text);

                if (pid == productid)
                {
                    if (count == 0)
                    {
                        totalqty = qty + quantity + totalqty;
                    }

                }
            }

            if (q1 < totalqty || q1 < quantity)
            {
                lblcheckDoubleError.ForeColor = System.Drawing.Color.Red;
                lblcheckDoubleError.Text = "Out Of Stock";
                return false;
            }

            else
            {
                //availableqty = q1 - quantity;
                //lblcheckDoubleError.ForeColor = System.Drawing.Color.Green;
                //lblcheckDoubleError.Text = "Avialable Quantity In Stock " + availableqty;
                return true;
            }
            // if(total > avali)

        }

        public void clr()
        {

            ddlproduct.SelectedIndex = 0;
            txtquantity.Text = "";
            txtBalanceAmt.Text = string.Empty;
            txtGivenAmt.Text = string.Empty;
        }
        public void calculation(decimal amt, decimal tax, decimal dis)
        {
            decimal tot = 0;
            decimal tottax = 0;
            decimal dec = 0;
            decimal gtot = 0;
            tot = Convert.ToDecimal(lblsubtotal.Text) + amt;
            lblsubtotal.Text = tot.ToString("0.##");
            tottax = Convert.ToDecimal(lblTaxAmount.Text) + tax;
            lblTaxAmount.Text = tottax.ToString("0.##");
            dec = Convert.ToDecimal(lblDiscountAmt.Text) + dis;
            lblDiscountAmt.Text = dec.ToString("0.##");

            gtot = Convert.ToDecimal(lblsubtotal.Text) + (Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(lblDiscountAmt.Text));
            lblGrandTotal.Text = gtot.ToString("0.##");


        }
        public void updatecal()
        {
            decimal a1 = Convert.ToDecimal(lblsubtotal.Text) - Convert.ToDecimal(ViewState["subtot"]);
            decimal b1 = Convert.ToDecimal(lblDiscountAmt.Text) - Convert.ToDecimal(ViewState["discountamount"]);
            decimal c = Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(ViewState["taxamount"]);
            lblsubtotal.Text = a1.ToString();
            lblDiscountAmt.Text = b1.ToString();
            lblTaxAmount.Text = c.ToString();
            decimal d = (a1 + c) - b1;
            lblGrandTotal.Text = d.ToString();
        }
        protected void BindGrid()
        {
            try
            {
                gvsalesdetails.DataSource = (DataTable)ViewState["Details"];
                gvsalesdetails.DataBind();
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }
        public void GetSaleDetails()
        {
            try
            { 
            var sale = context.tbl_sale.Where(w => w.InvoiceNumber == txtSoNo.Text && w.company_id == companyId && w.branch_id == branchId).FirstOrDefault();
            if (sale == null)
            {
                ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Invoice does not exist, Please enter valid Invoice Number.','True');", true);
                return;
            }

            hdnSaleId.Value = sale.sale_id.ToString();           

            var products = context.tbl_saledetails.Join(context.tbl_product, sd => sd.product_id, p => p.product_id, (sd, p) => new { sd.sale_id, sd.product_id, p.product_name }).Where(w => w.sale_id == sale.sale_id).ToList();

            ddlproduct.DataTextField = "product_name";
            ddlproduct.DataValueField = "product_id";
            ddlproduct.DataSource = products;
            ddlproduct.DataBind();
            ddlproduct.Items.Insert(0, new ListItem("--Select Product--", "0"));
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
            
        }

        protected void Save()
        {
            try
            {
                int purchaseId = Convert.ToInt32(hdnSaleId.Value);
                if (purchaseId == 0)
                {
                    ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Please Enter Sale No','False');", true);
                    return;
                }

                var Sale = context.tbl_sale.Where(pd => pd.sale_id == purchaseId && pd.company_id == companyId && pd.branch_id == branchId).FirstOrDefault();
                tbl_salereturn saleReturn = new tbl_salereturn();
                saleReturn.sale_id = purchaseId;
                saleReturn.company_id = companyId;
                saleReturn.branch_id = branchId;
                saleReturn.financialyear_id = Convert.ToInt32(Session["financialyear_id"]);
                saleReturn.InvoiceNumber = txtSoNo.Text;
                saleReturn.given_amnt = Convert.ToDecimal(txtGivenAmt.Text);
                saleReturn.balance_amnt = Convert.ToDecimal(txtBalanceAmt.Text);
                saleReturn.paymentmode_id = Convert.ToInt32(ddlPaymentMode.SelectedValue);
                saleReturn.status = true;
                saleReturn.party_id = Convert.ToInt32(Sale.party_id);
                saleReturn.total_tax = Convert.ToDecimal(lblTaxAmount.Text);
                saleReturn.total_discount = Convert.ToDecimal(lblDiscountAmt.Text);
                saleReturn.total_amount = Convert.ToDecimal(lblsubtotal.Text);
                saleReturn.grand_total = Convert.ToDecimal(lblGrandTotal.Text);
                saleReturn.created_by = user_id;
                saleReturn.created_date = DateTime.Now;

                for (int i = 0; i <= gvsalesdetails.Rows.Count - 1; i++)
                {
                    int productId = Convert.ToInt32(gvsalesdetails.Rows[i].Cells[2].Text);
                    int batchId = Convert.ToInt32(gvsalesdetails.Rows[i].Cells[4].Text);
                    tbl_product product = context.tbl_product.Where(w => w.product_id == productId).FirstOrDefault();

                    tbl_salereturndetails saleeReturnDetails = new tbl_salereturndetails();
                    saleeReturnDetails.product_id = productId;
                    saleeReturnDetails.batch_id = batchId;
                    saleeReturnDetails.tax_id = product.tax_id;
                    saleeReturnDetails.unit_id = product.unit_id;
                    saleeReturnDetails.tax_amt = Convert.ToDecimal(gvsalesdetails.Rows[i].Cells[9].Text);
                    saleeReturnDetails.quantity = Convert.ToInt32(gvsalesdetails.Rows[i].Cells[5].Text);
                    saleeReturnDetails.amount = Convert.ToDecimal(gvsalesdetails.Rows[i].Cells[10].Text);
                    saleeReturnDetails.created_by = Convert.ToString(user_id);
                    saleeReturnDetails.created_date = Convert.ToDateTime(DateTime.Now);
                    saleeReturnDetails.status = true;

                    tbl_stock stock = new tbl_stock();
                    stock = context.tbl_stock.Where(w => w.company_id == companyId && w.branch_id == branchId && w.product_id == productId).FirstOrDefault();
                    stock.qty = stock.qty + Convert.ToInt32(gvsalesdetails.Rows[i].Cells[5].Text);
                    stock.modified_by = Convert.ToString(user_id);
                    stock.modified_date = Convert.ToDateTime(DateTime.Now);

                    saleReturn.tbl_salereturndetails.Add(saleeReturnDetails);
                }

                context.tbl_salereturn.Add(saleReturn);
                context.SaveChanges();
                string invoiceNumber = saleReturn.InvoiceNumber;
                ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('saved Successfully, You order number is " + invoiceNumber + "','True');", true);
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
        }
        #endregion

        /// <summary>
        /// All The Events That are used in coding
        /// </summary>
        #region Events
        protected void btnSearch_Click(object sender, EventArgs e)
        {
            ddlproduct.Items.Clear();
            GetSaleDetails();
        }

        protected void btnAdd_Click(object sender, EventArgs e)
        {
            lblcheckDoubleError.Text = string.Empty;
            int saleId = Convert.ToInt32(hdnSaleId.Value);
            lblcheckDoubleError.Text = string.Empty;
            int productId = Convert.ToInt32(ddlproduct.SelectedValue);
            decimal enteredQuantity = Convert.ToDecimal(txtquantity.Text);

            try
            {
                var productDetails = context.sp_GetSaleDetailsById(saleId).ToList();                    
                if (productDetails != null)
                {
                    var oneproductDetail = productDetails.Where(w => w.product_id == productId);
                    if (!ValidateQuantity(enteredQuantity, productId))
                    {
                        decimal subTotal = Convert.ToDecimal(txtquantity.Text) * Convert.ToDecimal(oneproductDetail.FirstOrDefault().sale_rate);
                        decimal a = subTotal / 100;
                        decimal discount_percent = (Convert.ToDecimal(oneproductDetail.FirstOrDefault().dicount_amt) * 100) / Convert.ToDecimal(oneproductDetail.FirstOrDefault().amount);
                        decimal discountamt = a * Convert.ToDecimal(discount_percent.ToString("0.##"));
                        decimal tax_amount = a * Convert.ToDecimal(oneproductDetail.FirstOrDefault().tax_percentage);

                        clr();
                        calculation(subTotal, tax_amount, discountamt);
                        txtBalanceAmt.Enabled = true;
                        txtGivenAmt.Enabled = true;

                        DataTable tbl = (DataTable)ViewState["Details"];

                        tbl.Rows.Add(oneproductDetail.FirstOrDefault().saledetails_id, productId, oneproductDetail.FirstOrDefault().batch_id, oneproductDetail.FirstOrDefault().unit_id,
                            oneproductDetail.FirstOrDefault().tax_id, subTotal, discountamt, tax_amount, oneproductDetail.FirstOrDefault().sale_rate, enteredQuantity,
                            oneproductDetail.FirstOrDefault().product_name, oneproductDetail.FirstOrDefault().unit_name, oneproductDetail.FirstOrDefault().batch_name,
                            oneproductDetail.FirstOrDefault().tax_percentage);
                        ViewState["Details"] = tbl;
                        this.BindGrid();
                        ddlproduct.Items.FindByValue(productId.ToString()).Enabled = false;

                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }


            ////DataTable dt = new DataTable();
            ////dt = (DataTable)Session["table"];
            ////DataView dv = new DataView(dt);
            ////dv.RowFilter = "product_id =" + Convert.ToInt32(ddlproduct.SelectedValue);
            ////DataTable dt1 = new DataTable();
            ////dt1 = dv.ToTable();

            ////try
            ////{
            ////    if (hd.Value != "true")
            ////    {


            ////        if (Convert.ToInt32(txtquantity.Text) > Convert.ToInt32(dt1.Rows[0]["quantity"].ToString()))
            ////        {
            ////            ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('Please Enter a Quantity Below This ','False');", true);
            ////            return;
            ////        }
            ////        else
            ////        {
            ////            int sales_details = Convert.ToInt32(dt.Rows[0]["saledetails_id"].ToString());
            ////            string batch = dt.Rows[0]["batch_name"].ToString();
            ////            string product_name = ddlproduct.SelectedItem.Text.Trim();
            ////            dt.Rows[0]["quantity"] = txtquantity.Text;
            ////            int tax_id = Convert.ToInt32(dt.Rows[0]["tax_id"]);
            ////            int b = Convert.ToInt32(dt.Rows[0]["batch_id"]);
            ////            int unit_id = Convert.ToInt32(dt.Rows[0]["unit_id"]);
            ////            int p = Convert.ToInt32(ddlproduct.SelectedValue);
            ////            string tax = dt.Rows[0]["tax_percentage"].ToString();
            ////            string unit_name = dt.Rows[0]["unit_name"].ToString();
            ////            decimal SubTotal = Convert.ToDecimal(txtquantity.Text) * Convert.ToDecimal(dt.Rows[0]["sale_rate"].ToString());
            ////            decimal a = SubTotal / 100;
            ////            decimal priviousamunt= decimal.Parse(dt.Rows[0]["amount"].ToString());
            ////            decimal priviousdiscountamount = decimal.Parse(dt.Rows[0]["dicount_amt"].ToString());
            ////            decimal discount_percent = priviousdiscountamount / priviousamunt * 100;
            ////            decimal discountamt = a * Convert.ToDecimal(discount_percent.ToString("0.##"));
            ////            decimal tax_amount = a * decimal.Parse(tax);
            ////            decimal price = Convert.ToDecimal(dt.Rows[0]["sale_rate"]);
            ////            decimal quantity = Convert.ToDecimal(txtquantity.Text);

            ////            //if (productvalid(p, Convert.ToDecimal(txtquantity.Text)) != false)
            ////            //{
            ////                DataTable tbl = (DataTable)ViewState["Details"];
            ////                tbl.Rows.Add(sales_details, p, b, unit_id, tax_id, SubTotal, discountamt, tax_amount, price, quantity, product_name, unit_name, batch, tax);
            ////                ViewState["Details"] = tbl;
            ////                this.BindGrid();
            ////                clr();
            ////                calculation(SubTotal, tax_amount, discountamt);

            ////                txtBalanceAmt.Enabled = true;
            ////                txtGivenAmt.Enabled = true;
            ////            //}
            ////        }
            ////    }
            ////    else
            ////    {
            ////        lblcheckDoubleError.ForeColor = System.Drawing.Color.Red;
            ////        lblcheckDoubleError.Text = "Insufficient  Quantity";
            ////    }
            ////}
            ////catch (Exception ex)
            ////{
            ////    ErrorLog.saveerror(ex);
            ////    //Do Logging
            ////}
        }
        public bool ValidateQuantity(decimal enterdQuantity, int productid)
        {
            bool isfail = false;
            int purchaseId = Convert.ToInt32(hdnSaleId.Value);
            try
            {
                if (enterdQuantity != 0 && productid != 0)
                {
                    if (companyId != 0 && purchaseId != 0)
                    {
                        SqlHelper helper = new SqlHelper();
                        var stockQuantity = context.tbl_stock.Where(s => s.company_id == companyId && s.product_id == productid).FirstOrDefault();

                        var returnQuantity = context.GetReturnQuantity(purchaseId, Constants.Sale, productid, companyId).FirstOrDefault();
                        
                            if (enterdQuantity <= returnQuantity)
                            {
                                if (stockQuantity.qty < Convert.ToDecimal(enterdQuantity))
                                {
                                    isfail = true;
                                    lblcheckDoubleError.Visible = true;
                                    lblcheckDoubleError.Text = "Insufficient stock quantity.";
                                    return isfail;
                                }
                            }
                            else
                            {
                                isfail = true;
                                lblcheckDoubleError.Visible = true;
                                lblcheckDoubleError.Text = "Only " + returnQuantity + " can be return for the selected product.";
                                return isfail;
                            }
                        
                    }
                }
                else
                {
                    isfail = true;
                    lblcheckDoubleError.Visible = true;
                    lblcheckDoubleError.Text = "Please select product or enter correct return quantity.";
                    return isfail;
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
            return isfail;
        }

        //protected void ddlproduct_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        lblcheckDoubleError.Text = string.Empty;
        //        int c_id = Convert.ToInt32(Session["company_id"]);
        //        int p_id = Convert.ToInt32(ddlproduct.SelectedValue);
        //        int data = helper.GetStockQuantity(Convert.ToInt32(HttpContext.Current.Session["company_id"]), Convert.ToInt32(p_id));
        //        Session["quant"] = data;

        //        lblcheckDoubleError.ForeColor = System.Drawing.Color.Green;
        //        lblcheckDoubleError.Text = "Avialable Quantity In Stock " + data;
        //        UpdatePanel1.Update();
        //    }
        //    catch (Exception ex)
        //    {

        //        ErrorLog.saveerror(ex);
        //        //Do Logging
        //    }
        //}

        protected void gvsalesdetails_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                GridViewRow grv = ((GridViewRow)((ImageButton)e.CommandSource).NamingContainer);

                decimal subTotal = Convert.ToDecimal(grv.Cells[5].Text) * Convert.ToDecimal(grv.Cells[6].Text);
                decimal a = subTotal / 100;
                decimal discount_percent = decimal.Parse(grv.Cells[7].Text) * 100 / decimal.Parse(grv.Cells[10].Text);
                decimal discountamt = a * Convert.ToDecimal(discount_percent.ToString("0.##"));
                decimal tax_amount = a * decimal.Parse(grv.Cells[8].Text);
                DeleteCalculation(subTotal, tax_amount, discountamt);

                if (e.CommandName == "Delete row")
                {
                    int rowIndex = grv.RowIndex;
                    ViewState["id"] = rowIndex;
                    ddlproduct.Items.FindByValue(grv.Cells[2].Text).Enabled = true;
                    DataTable dt = ViewState["Details"] as DataTable;
                    dt.Rows[rowIndex].Delete();
                    ViewState["Details"] = dt;
                    this.BindGrid();  

                }
                else if (e.CommandName == "Update Row")
                {
                    if (!btnUpdate.Visible)
                    {
                        ViewState["id"] = grv.RowIndex;
                        ddlproduct.SelectedValue = grv.Cells[2].Text.ToString();
                        ddlproduct.Items.FindByValue(grv.Cells[2].Text).Enabled = true;
                        txtquantity.Text = grv.Cells[5].Text.ToString();
                        btnUpdate.Visible = true;
                        btnAdd.Visible = false;
                        ddlproduct.Enabled = false;
                    }                 
                }
                
            }

            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }
        private void DeleteCalculation(decimal subTotal, decimal tax_amount, decimal discountamt)
        {
            decimal tot = 0;
            decimal tottax = 0;
            decimal dec = 0;
            decimal gtot = 0;
            tot = Convert.ToDecimal(lblsubtotal.Text) - subTotal;
            lblsubtotal.Text = tot.ToString("0.##");
            tottax = Convert.ToDecimal(lblTaxAmount.Text) - tax_amount;
            lblTaxAmount.Text = tottax.ToString("0.##");
            dec = Convert.ToDecimal(lblDiscountAmt.Text) - discountamt;
            lblDiscountAmt.Text = dec.ToString("0.##");

            gtot = Convert.ToDecimal(lblsubtotal.Text) + (Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(lblDiscountAmt.Text));
            lblGrandTotal.Text = gtot.ToString("0.##");
        }
        protected void btnUpdate_Click(object sender, EventArgs e)
        {
            lblcheckDoubleError.Text = string.Empty;
            DataTable dt = new DataTable();
            dt = (DataTable)ViewState["Details"];
            int productId = Convert.ToInt32(ddlproduct.SelectedValue);
            decimal enteredQuantity = Convert.ToDecimal(txtquantity.Text);
            try
            {
                if (!ValidateQuantity(enteredQuantity, productId))
                {
                    DataRow dr = dt.Select("product_id=" + productId + "").FirstOrDefault();
                    if (dr != null)
                    {
                        decimal subTotal = Convert.ToDecimal(txtquantity.Text) * Convert.ToDecimal(dr["sale_rate"]);
                        decimal a = subTotal / 100;
                        decimal discount_percent = (Convert.ToDecimal(dr["dicount_amt"]) * 100) / Convert.ToDecimal(dr["amount"]);
                        decimal discountamt = a * Convert.ToDecimal(discount_percent.ToString("0.##"));
                        decimal tax_amount = a * Convert.ToDecimal(dr["tax_percentage"]);

                        dr["quantity"] = txtquantity.Text;
                        dr["tax_amt"] = tax_amount;
                        dr["dicount_amt"] = discountamt;
                        dr["amount"] = subTotal;

                        clr();
                        calculation(subTotal, tax_amount, discountamt);
                        txtBalanceAmt.Enabled = true;
                        txtGivenAmt.Enabled = true;
                        ViewState["Details"] = dt;
                        ddlproduct.Enabled = true;
                        this.BindGrid();
                        ddlproduct.Items.FindByValue(productId.ToString()).Enabled = false;
                        btnUpdate.Visible = false;
                        btnAdd.Visible = true;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
        }

        protected void btnOk_Click(object sender, EventArgs e)
        {
            try
            {
                if (ViewState["total"] != null && ViewState["dis"] != null && ViewState["tax"] != null)
                {
                    updatecal();

                    if (ViewState["Details"] != null)
                    {

                        DataTable dt = ViewState["Details"] as DataTable;
                        int row = Convert.ToInt32(ViewState["id"]);
                        dt.Rows[row].Delete();
                        lblcheckDoubleError.Text = string.Empty;
                        gvsalesdetails.DataSource = dt;
                        gvsalesdetails.DataBind();
                    }


                }

                else
                {
                    lblError.Text = "Row is empty";
                }
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            //savedcode();
            Save();
        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                Response.Redirect("SalesReturn.aspx", false);
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void txtGivenAmt_TextChanged(object sender, EventArgs e)
        {
            try
            { //decimal a = Convert.ToDecimal(lblGrandTotal.Text) - Convert.ToDecimal(txtGivenAmt.Text);
                //txtBalanceAmt.Text = a.ToString();
                decimal a=Convert.ToDecimal(lblGrandTotal.Text);
                decimal b= Convert.ToDecimal(txtGivenAmt.Text);
                if ( a<b)
                {
                    txtGivenAmt.Text = lblGrandTotal.Text;
                    txtBalanceAmt.Text = "0";
                }

                else
                {
                    decimal c = Convert.ToDecimal(lblGrandTotal.Text) - Convert.ToDecimal(txtGivenAmt.Text);
                    txtBalanceAmt.Text = c.ToString();
                }
                UpdatePanel1.Update();
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }
        #endregion
    }
}