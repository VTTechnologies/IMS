using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using IMSBLL.EntityModel;
using System.Web.Security;
using IMSBLL.DAL;
using System.Security.Cryptography;
using System.Text;
using System.Configuration;

namespace IMS.Registration
{
    public partial class Login : System.Web.UI.Page
    {
        int us_ID;

        /// <summary>
        /// All The objects That are used in coding
        /// </summary>
        IMS2Entities context = new IMS2Entities();
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["TestDBConnection"].ConnectionString);
        protected void Page_Load(object sender, EventArgs e)
        {

        }


        /// <summary>
        /// All The Methods That are used in coding
        /// </summary>

        #region Methods
        public void login()
        {
            try
            {
                if (txtEmail.Text != "  " && txtPassword.Text != "")
                {
                    AuthenticateUser();
                    us_ID = Convert.ToInt32(Session["UserID"]);

                    if (us_ID > 0)
                    {
                        selectUserRole();
                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "sp_checklicense";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Connection = con;
                        cmd.CommandTimeout = 600000;
                        con.Open();
                        int c_id = Convert.ToInt32(Session["company_id"]);
                        cmd.Parameters.AddWithValue("@company_id", c_id);
                        cmd.Parameters.AddWithValue("@user_id", us_ID);
                        cmd.Parameters.Add("@Subscription_count", SqlDbType.Int);
                        cmd.Parameters["@Subscription_count"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@free_count", SqlDbType.Int);
                        cmd.Parameters["@free_count"].Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();
                        int mcid = Convert.ToInt32(cmd.Parameters["@Subscription_count"].Value);
                        int freedays_count = Convert.ToInt32(cmd.Parameters["@free_count"].Value);
                        if (mcid > 0)
                        {
                            if (freedays_count > 0)
                            {

                                string userData = "";
                                string role = Convert.ToString(Session["Rolename"]);
                                if (role == "Sales Manager")
                                {
                                    userData = "Sales";
                                }
                                else if (role == "Purchase Manager")
                                {
                                    userData = "Purchase";
                                }
                                else if (role == "Manager" || role == "")
                                {
                                    userData = "Manager";
                                }
                                Session["UserRoleSession"] = userData;

                                if (userData != "")
                                {
                                    // create a new ticket used for authentication
                                    FormsAuthenticationTicket ticket = new FormsAuthenticationTicket(1, txtEmail.Text, DateTime.Now, DateTime.Now.AddMinutes(15), false, userData, FormsAuthentication.FormsCookiePath);
                                    var encryptedTicket = FormsAuthentication.Encrypt(ticket);
                                    if (cbRemember.Checked)
                                    {
                                        HttpCookie cookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket);
                                        cookie.Expires = ticket.Expiration;
                                        HttpContext.Current.Response.Cookies.Set(cookie);
                                    }
                                    else
                                    {
                                        FormsAuthentication.SetAuthCookie(txtEmail.Text, false);
                                    }
                                }
                                string returnUrl = Request.QueryString["ReturnUrl"];
                                if (role.Equals("Purchase Manager"))
                                {
                                    returnUrl = "PurchaseFolder/Purchase.aspx";
                                }
                                else if (role == "Sales Manager")
                                {
                                    returnUrl = "SalesFolder/Sale.aspx";
                                }
                                else if (role == "Manager" || role == "")
                                {
                                    returnUrl = "Home.aspx";
                                }
                                Response.Redirect(@"~/" + returnUrl, false);
                            }
                            else
                            {
                                ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert();", true);
                            }
                        }
                        else
                        {
                            ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert();", true);
                        }
                    }
                    else
                    {
                        lblError.Visible = true;
                        lblError.Text = "Invalid User Name or Password";

                    }

                }
                else
                {
                    lblError.Visible = true;
                    lblError.Text = "Please Enter Your Email ID and Password";

                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
        }

        private int AuthenticateUser()
        {
            UserRol r = new UserRol();
            r.user_name = txtEmail.Text;
            string enPswd = GetSwcSHA1(txtPassword.Text);
            r.password = enPswd;
            r.userID(r);
            Session["UserID"] = r.user_id;
            Session["username"] = txtEmail.Text;
            return us_ID;
        }

        public void selectUserRole()
        {
            UserRol r = new UserRol();
            r.user_id = Convert.ToInt32(Session["UserID"]);
            r.RoleName(r);
            Session["Rolename"] = r.role_name;
            Session["company_id"] = r.company_id;
            Session["branch_id"] = r.branch_id;
            Session["LoginuserName"] = r.loginUsername;
        }

        public static string GetSwcSHA1(string value)
        {
            SHA1 algorithm = SHA1.Create();
            byte[] data = algorithm.ComputeHash(Encoding.UTF8.GetBytes(value));
            string sh1 = "";
            for (int i = 0; i < data.Length; i++)
            {
                sh1 += data[i].ToString("x2").ToUpperInvariant();
            }
            return sh1;
        }
        #endregion

        /// <summary>
        /// All The Events That are used in coding
        /// </summary>

        #region Events
        protected void btnLogin_Click(object sender, EventArgs e)
        {
            login();
        }

        protected void btnOk_Click(object sender, EventArgs e)
        {
            try
            {
                Response.Redirect("../Subscription/Pricing.aspx",false);
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
        }

        #endregion
    }
}