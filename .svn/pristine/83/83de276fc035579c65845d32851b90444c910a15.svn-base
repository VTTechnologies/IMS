using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using IMSBLL.EntityModel;
using IMSBLL.DAL;
using System.Configuration;

namespace IMS
{
    public partial class Purchase : System.Web.UI.Page
    {
        IMS_TESTEntities context = new IMS_TESTEntities();
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["TestDBConnection"].ConnectionString);
        protected void Page_Load(object sender, EventArgs e)
        {

            try
            {
                if (!IsPostBack)
                {
                    if (ViewState["Details"] == null)
                    {
                        DataTable dataTable = new DataTable();

                        dataTable.Columns.Add("Vendore");
                        dataTable.Columns.Add("Product_id");
                        dataTable.Columns.Add("PON");
                        dataTable.Columns.Add("Date");
                        dataTable.Columns.Add("Product");
                        dataTable.Columns.Add("Batch");
                        dataTable.Columns.Add("Batch_id");
                        dataTable.Columns.Add("Quantity");
                        dataTable.Columns.Add("Price");
                        dataTable.Columns.Add("Discount");
                        dataTable.Columns.Add("Discount Amount");
                        dataTable.Columns.Add("SalePrice");
                        dataTable.Columns.Add("Tax");
                        dataTable.Columns.Add("Tax Amount");
                        dataTable.Columns.Add("Sub Total");
                        ViewState["Details"] = dataTable;
                    }
                    this.BindGrid();
                    ddlVendorbind();
                    ddlproductbind();
                    ddlbatchbind();
                    ddlpaymentmodebind();
                    getdate();
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
        }


       //Methods------------------

        protected void savelogic()
        {
            SqlTransaction transaction;
            SqlCommand cmd = new SqlCommand();
            cmd.CommandText = "sp_Purchaseinsert";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Connection = con;
            cmd.CommandTimeout = 600000;
            con.Open();
            transaction = con.BeginTransaction("Transaction");
            cmd.Transaction = transaction;
            try
            {
                int c_id = Convert.ToInt32(Session["company_id"]);
                int b_id = Convert.ToInt32(Session["branch_id"]);




                cmd.Parameters.AddWithValue("@company_id", c_id);
                cmd.Parameters.AddWithValue("@branch_id", b_id);
                cmd.Parameters.AddWithValue("@party_id", ddlVendor.SelectedValue);
                cmd.Parameters.AddWithValue("@po_no", txtPONo.Text);
                cmd.Parameters.AddWithValue("@Po_Date", txtdate.Text);
                cmd.Parameters.AddWithValue("@total_tax", lblTaxAmount.Text);
                cmd.Parameters.AddWithValue("@discount", lblDiscountAmt.Text);
                cmd.Parameters.AddWithValue("@actual_amount", lblsubtotal.Text);
                cmd.Parameters.AddWithValue("@grand_total", lblGrandTotal.Text);
                cmd.Parameters.AddWithValue("@created_by", Session["UserID"].ToString());
                cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                cmd.Parameters.Add("@purchase_id", SqlDbType.Int);
                cmd.Parameters["@purchase_id"].Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();
                int mcid = Convert.ToInt32(cmd.Parameters["@purchase_id"].Value);
                cmd.Parameters.Clear();



                //GridViewRow row = gvpurchasedetails.Rows[rowIndex];
                for (int i = 0; i <= gvpurchasedetails.Rows.Count - 1; i++)
                {
                    //Purchase Details Saving Code Start Here

                    cmd.CommandText = "sp_PurchaseDetailinsert";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@product_id", gvpurchasedetails.Rows[i].Cells[2].Text);
                    cmd.Parameters.AddWithValue("@purchase_id", mcid);
                    cmd.Parameters.AddWithValue("@batch_id", gvpurchasedetails.Rows[i].Cells[4].Text);
                    cmd.Parameters.AddWithValue("@tax_amt", gvpurchasedetails.Rows[i].Cells[11].Text);
                    cmd.Parameters.AddWithValue("@dicount_amt", gvpurchasedetails.Rows[i].Cells[9].Text);
                    cmd.Parameters.AddWithValue("@quantity", Convert.ToDecimal(gvpurchasedetails.Rows[i].Cells[5].Text));
                    cmd.Parameters.AddWithValue("@amount", gvpurchasedetails.Rows[i].Cells[12].Text);
                    cmd.Parameters.AddWithValue("@purchase_rate", gvpurchasedetails.Rows[i].Cells[6].Text);
                    cmd.Parameters.AddWithValue("@sale_rate", gvpurchasedetails.Rows[i].Cells[7].Text);
                    cmd.Parameters.AddWithValue("@user_id", Session["UserID"].ToString());
                    cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                    cmd.Parameters.Add("@purchasedetails_id", SqlDbType.Int);
                    cmd.Parameters["@purchasedetails_id"].Direction = ParameterDirection.Output;
                    cmd.Connection = con;
                    cmd.CommandTimeout = 600000;
                    cmd.ExecuteNonQuery();
                    int details_id = Convert.ToInt32(cmd.Parameters["@purchasedetails_id"].Value);
                    cmd.Parameters.Clear();
                    // Purchase Details Code End

                    // Stock & Stock Transaction Data Saving Code Starts Here
                    cmd.CommandText = "sp_InsertTransaction";
                    cmd.CommandType = CommandType.StoredProcedure;

                    // code are here

                    cmd.Parameters.AddWithValue("@company_id", c_id);
                    cmd.Parameters.AddWithValue("@branch_id", b_id);
                    cmd.Parameters.AddWithValue("@product_id", gvpurchasedetails.Rows[i].Cells[2].Text);
                    cmd.Parameters.AddWithValue("@bacth_id", gvpurchasedetails.Rows[i].Cells[4].Text);
                    cmd.Parameters.AddWithValue("@in_out", "In");
                    cmd.Parameters.AddWithValue("@qty", Convert.ToDecimal(gvpurchasedetails.Rows[i].Cells[5].Text));
                    cmd.Parameters.AddWithValue("@transactio_type_id", details_id);
                    cmd.Parameters.AddWithValue("@stocktransaction_typ", "Purchase");
                    cmd.Parameters.AddWithValue("@created_by", Session["UserID"].ToString());
                    cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                    cmd.Connection = con;
                    cmd.CommandTimeout = 600000;
                    // end

                    cmd.ExecuteNonQuery();
                    cmd.Parameters.Clear();

                    // Stock & Stock Transaction Data Saving Code end

                }


                cmd.Parameters.Clear();
                cmd.CommandText = "sp_InsertMonyTransaction";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@company_id", c_id);
                cmd.Parameters.AddWithValue("@branch_id", b_id);
                cmd.Parameters.AddWithValue("@party_id", ddlVendor.SelectedValue);
                cmd.Parameters.AddWithValue("@given_amt", txtGivenAmt.Text);
                cmd.Parameters.AddWithValue("@grand_total", lblGrandTotal.Text);
                cmd.Parameters.AddWithValue("@balance_amt", txtBalanceAmt.Text);
                cmd.Parameters.AddWithValue("@in_out", "Out");
                cmd.Parameters.AddWithValue("@paymentmode_id", ddlPaymentMode.SelectedValue);
                cmd.Parameters.AddWithValue("@transaction_typ", "Purchase");
                cmd.Parameters.AddWithValue("@transactio_type_id", mcid);
                cmd.Parameters.AddWithValue("@created_by", Session["UserID"].ToString());
                cmd.Parameters.AddWithValue("@created_date", DateTime.Today);
                cmd.Connection = con;
                cmd.CommandTimeout = 600000;
                cmd.ExecuteNonQuery();
                transaction.Commit();
                con.Close();
                Session["p_id"] = mcid;
                string order = mcid.ToString();

                ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openalert('saved Successfully, You order number is " + order + "');", true);

            }
            catch (Exception ex)
            {
                transaction.Rollback();
                ErrorLog.saveerror(ex);
            }
            finally
            {
                if (con != null && con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public void clr()
        {
            ddlBatch.SelectedIndex = 0;
            ddlproduct.SelectedIndex = 0;
            txtquantity.Text = "";
            txtprice.Text = "";
            txtDiscount.Text = "";
            txtsalesprice.Text = "";
        }


        public void updatecal()
        {
            decimal a1 = Convert.ToDecimal(lblsubtotal.Text) - Convert.ToDecimal(ViewState["subtot"]);
            decimal b1 = Convert.ToDecimal(lblDiscountAmt.Text) - Convert.ToDecimal(ViewState["discountamount"]);
            decimal c = Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(ViewState["taxamount"]);
            lblsubtotal.Text = a1.ToString();
            lblDiscountAmt.Text = b1.ToString();
            lblTaxAmount.Text = c.ToString();
            decimal d = (a1 + c) - b1;
            lblGrandTotal.Text = d.ToString();
        }
        public void ddlVendorbind()
        {
            int c_id = Convert.ToInt32(Session["company_id"]);

            List<tbl_party> cd = context.tbl_party.Where(x => x.status == true && x.company_id == c_id && x.party_type == "Vendor").ToList();
            ddlVendor.DataTextField = "party_name";
            ddlVendor.DataValueField = "party_id";
            ddlVendor.DataSource = cd;
            ddlVendor.DataBind();
            ddlVendor.Items.Insert(0, new ListItem("--Select Vendor--", "0"));
        }

        public void ddlproductbind()
        {
            int c_id = Convert.ToInt32(Session["company_id"]);
            int b_id = Convert.ToInt32(Session["branch_id"]);

            //context.tbl_product.Where(x => x.status == true && x.company_id == c_id).ToList();
            ddlproduct.DataTextField = "product_name";
            ddlproduct.DataValueField = "product_id";
            ddlproduct.DataSource = context.sp_SelectProduct(c_id, b_id);
            ddlproduct.DataBind();
            ddlproduct.Items.Insert(0, new ListItem("--Select Product--", "0"));
        }

        public void ddlbatchbind()
        {
            int c_id = Convert.ToInt32(Session["company_id"]);
            List<tbl_batch> cd = context.tbl_batch.Where(x => x.status == true && x.company_id == c_id).ToList();
            ddlBatch.DataTextField = "batch_name";
            ddlBatch.DataValueField = "batch_id";
            ddlBatch.DataSource = cd;
            ddlBatch.DataBind();
            ddlBatch.Items.Insert(0, new ListItem("--Select Batch--", "0"));
        }
        public void ddlpaymentmodebind()
        {
            int c_id = Convert.ToInt32(Session["company_id"]);
            List<tbl_paymentmode> cd = context.tbl_paymentmode.Where(x => x.status == true).ToList();
            ddlPaymentMode.DataTextField = "paymentmode_name";
            ddlPaymentMode.DataValueField = "paymentode_id";
            ddlPaymentMode.DataSource = cd;
            ddlPaymentMode.DataBind();
        }

        public bool validateddl()
        {
            if (ddlBatch.SelectedIndex == 0)
            {
                return false;
            }
            else
            {
                return true;
            }

        }
        protected void BindGrid()
        {
            gvpurchasedetails.DataSource = (DataTable)ViewState["Details"];
            gvpurchasedetails.DataBind();
        }
        public void calculation(decimal amt, decimal tax, decimal dis)
        {
            decimal tot = 0;
            decimal tottax = 0;
            decimal dec = 0;
            decimal gtot = 0;
            tot = Convert.ToDecimal(lblsubtotal.Text) + amt;
            lblsubtotal.Text = tot.ToString();
            tottax = Convert.ToDecimal(lblTaxAmount.Text) + tax;
            lblTaxAmount.Text = tottax.ToString();
            dec = Convert.ToDecimal(lblDiscountAmt.Text) + dis;
            lblDiscountAmt.Text = dec.ToString();

            gtot = Convert.ToDecimal(lblsubtotal.Text) + (Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(lblDiscountAmt.Text));
            lblGrandTotal.Text = gtot.ToString();


        }
        public void getdate()
        {
            try
            {
                ////Shakeeb
                ////int c_id = Convert.ToInt32(Session["company_id"]);
                ////tbl_purchase p = new tbl_purchase();
                ////p.company_id = c_id;
                ////p.All(p);
                ////hd1.Value = p.startdate;
                ////hd2.Value = p.enddate;

            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
            }
        }

        //Events-----
        protected void btnAdd_Click(object sender, EventArgs e)
        {

            try
            {
                if (validateddl() == true)
                {
                    int c_id = Convert.ToInt32(Session["company_id"]);
                    string vendor = ddlVendor.SelectedItem.Text.Trim();
                    string PON = txtPONo.Text.Trim();
                    string date = txtdate.Text;
                    string pname = ddlproduct.SelectedItem.Text.Trim();
                    string batch = ddlBatch.SelectedItem.Text.Trim();
                    string quantity = txtquantity.Text.Trim();
                    string price = txtprice.Text.Trim();
                    string discount = txtDiscount.Text.Trim();
                    string salesp = txtsalesprice.Text.Trim();
                    if (discount == "" || discount == null)
                    {
                        discount = "0";
                    }
                    int p_id = Convert.ToInt32(ddlproduct.SelectedValue);
                    Tax_percent t = new Tax_percent();
                    t.company_id = c_id;
                    t.product_id = p_id;
                    t.All(t);
                    string tax = t.tax_percentage;
                    int Batch_id = Convert.ToInt32(ddlBatch.SelectedValue);
                    int product_id = Convert.ToInt32(ddlproduct.SelectedValue);
                    decimal SubTotal = Convert.ToDecimal(txtquantity.Text) * Convert.ToDecimal(txtprice.Text);
                    decimal a = SubTotal / 100;
                    decimal discountamt = a * decimal.Parse(discount);
                    decimal b = a * decimal.Parse(tax);

                    DataTable dt = (DataTable)ViewState["Details"];
                    dt.Rows.Add(vendor, product_id, PON, date, pname, batch, Batch_id, quantity, price, discount, discountamt, salesp, tax, b, SubTotal);
                    ViewState["Details"] = dt;
                    this.BindGrid();

                    clr();
                    txtBalanceAmt.Enabled = true;
                    txtGivenAmt.Enabled = true;
                    calculation(SubTotal, b, discountamt);
                    lblbatch.Visible = false;
                }
                else
                {
                    lblbatch.Visible = true;
                }

            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }

        }

        protected void btnUpdate_Click(object sender, System.EventArgs e)
        {
            try
            {


                if (ViewState["Details"] != "")
                {
                    if (validateddl() == true)
                    {
                        updatecal();
                        int c_id = Convert.ToInt32(Session["company_id"]);
                        int p_id = Convert.ToInt32(ddlproduct.SelectedValue);
                        string discount = txtDiscount.Text.Trim();
                        if (discount == "" || discount == null)
                        {
                            discount = "0";
                        }
                        Tax_percent t = new Tax_percent();
                        t.company_id = c_id;
                        t.product_id = p_id;
                        t.All(t);
                        string tax = t.tax_percentage;
                        int Batch_id = Convert.ToInt32(ddlBatch.SelectedValue);
                        int product_id = Convert.ToInt32(ddlproduct.SelectedValue);
                        decimal SubTotal = Convert.ToInt32(txtquantity.Text) * Convert.ToInt32(txtprice.Text);
                        decimal a = SubTotal / 100;
                        decimal discountamt = a * decimal.Parse(discount);
                        decimal b = a * decimal.Parse(tax);

                        DataTable dt = ViewState["Details"] as DataTable;
                        int row = Convert.ToInt32(ViewState["id"]);
                        dt.Rows[row][0] = ddlVendor.SelectedItem.Text.Trim();
                        dt.Rows[row][1] = ddlproduct.SelectedValue;
                        dt.Rows[row][2] = txtPONo.Text.Trim();
                        dt.Rows[row][3] = txtdate.Text.Trim();
                        dt.Rows[row][4] = ddlproduct.SelectedItem.Text.Trim();
                        dt.Rows[row][5] = ddlBatch.SelectedItem.Text.Trim();
                        dt.Rows[row][6] = ddlBatch.SelectedValue;
                        dt.Rows[row][7] = txtquantity.Text.Trim();
                        dt.Rows[row][8] = txtprice.Text.Trim();
                        dt.Rows[row][9] = txtDiscount.Text.Trim();
                        dt.Rows[row][10] = discountamt;
                        dt.Rows[row][11] = txtsalesprice.Text.Trim();
                        dt.Rows[row][12] = tax;
                        dt.Rows[row][13] = b;
                        dt.Rows[row][14] = SubTotal;

                        gvpurchasedetails.DataSource = dt;
                        gvpurchasedetails.DataBind();

                        clr();

                        calculation(SubTotal, b, discountamt);

                        btnAdd.Visible = true;
                        btnUpdate.Visible = false;
                    }
                    else
                    {
                        lblbatch.Visible = true;
                    }


                }



            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void btnSave_Click(object sender, System.EventArgs e)
        {
            savelogic();
            
        }
        //public string a_date;
        //public string b_date;
        protected void gvpurchasedetails_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {


                if (e.CommandName == "Delete row")
                {

                    GridViewRow grv = ((GridViewRow)((ImageButton)e.CommandSource).NamingContainer);
                    ViewState["total"] = grv.Cells[12].Text.ToString();
                    ViewState["dis"] = grv.Cells[9].Text.ToString();
                    ViewState["tax"] = grv.Cells[11].Text.ToString();

                    int rowIndex = grv.RowIndex;


                    ViewState["id"] = rowIndex;


                    ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openModal();", true);

                }
                else if (e.CommandName == "Update Row")
                {
                    GridViewRow grv = ((GridViewRow)((ImageButton)e.CommandSource).NamingContainer);
                    ViewState["id"] = grv.RowIndex;
                    //ddlproduct.SelectedIndex = Convert.ToInt32(grv.Cells[2].Text);
                    ddlproduct.SelectedValue = grv.Cells[2].Text.ToString();
                    //ddlBatch.SelectedIndex = Convert.ToInt32(grv.Cells[4].Text);
                    ddlBatch.SelectedValue = grv.Cells[4].Text.ToString();
                    txtquantity.Text = grv.Cells[5].Text.ToString();
                    txtprice.Text = grv.Cells[6].Text.ToString();
                    txtDiscount.Text = grv.Cells[8].Text.ToString();
                    txtsalesprice.Text = grv.Cells[7].Text.ToString();
                    btnUpdate.Visible = true;
                    btnAdd.Visible = false;
                    ViewState["subtot"] = (grv.Cells[12].Text);
                    ViewState["discountamount"] = (grv.Cells[9].Text);
                    ViewState["taxamount"] = (grv.Cells[11].Text);

                }
            }

            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }
        protected void btnclear_Click(object sender, System.EventArgs e)
        {
            Response.Redirect("../PurchaseFolder/Purchase.aspx", false);
        }
       
        protected void Button1_Click(object sender, System.EventArgs e)
        {
            try
            {
                if (ViewState["total"] != "" && ViewState["dis"] != "" && ViewState["tax"] != "")
                {

                    decimal t = Convert.ToDecimal(lblsubtotal.Text) - Convert.ToDecimal(ViewState["total"]);
                    decimal tx = Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(ViewState["tax"]);
                    decimal d = Convert.ToDecimal(lblDiscountAmt.Text) - Convert.ToDecimal(ViewState["dis"]);
                    lblsubtotal.Text = t.ToString();
                    lblTaxAmount.Text = tx.ToString();
                    lblDiscountAmt.Text = d.ToString();

                    if (ViewState["Details"] != "")
                    {

                        DataTable dt = ViewState["Details"] as DataTable;
                        int row = Convert.ToInt32(ViewState["id"]);
                        dt.Rows[row].Delete();

                        gvpurchasedetails.DataSource = dt;
                        gvpurchasedetails.DataBind();
                    }

                    decimal gtot = Convert.ToDecimal(lblsubtotal.Text) + (Convert.ToDecimal(lblTaxAmount.Text) - Convert.ToDecimal(lblDiscountAmt.Text));
                    lblGrandTotal.Text = gtot.ToString();
                    txtBalanceAmt.Text = lblGrandTotal.Text;
                }

                else
                {
                    lblError.Text = "Row is empty";
                }
            }

            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        //protected void btnCancel_Click(object sender, System.EventArgs e)
        //{
        //    Response.Redirect("PurchaseHome.aspx");
        //}

        protected void ddlproduct_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            try
            {
                txtprice.Text = string.Empty;
                txtsalesprice.Text = string.Empty;
                int c_id = Convert.ToInt32(Session["company_id"]);
                int b_id = Convert.ToInt32(Session["branch_id"]);
                int p_id = Convert.ToInt32(ddlproduct.SelectedValue);
                tbl_product p = new tbl_product();
                p.company_id = c_id;
                p.branch_id = b_id;
                p.product_id = p_id;
                ////Shakeeb
                ////p.All(p);
                txtprice.Text = Convert.ToString(p.purchas_price);
                txtsalesprice.Text = Convert.ToString(p.sales_price);
                UpdatePanel1.Update();
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void txtGivenAmt_TextChanged(object sender, System.EventArgs e)
        {
            try
            {
                //decimal a = Convert.ToDecimal(lblGrandTotal.Text) - Convert.ToDecimal(txtGivenAmt.Text);
                //txtBalanceAmt.Text = a.ToString();
                decimal a=Convert.ToDecimal(lblGrandTotal.Text);
                decimal b= Convert.ToDecimal(txtGivenAmt.Text);
                if ( a<b)
                {
                    txtGivenAmt.Text = lblGrandTotal.Text;
                    txtBalanceAmt.Text = "0";
                }

                else
                {
                    decimal c = Convert.ToDecimal(lblGrandTotal.Text) - Convert.ToDecimal(txtGivenAmt.Text);
                    txtBalanceAmt.Text = c.ToString();
                }
                UpdatePanel2.Update();
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void ddlBatch_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lblbatch.Visible == true)
            {
                lblbatch.Visible = false;
            }
        }

        protected void btnPrint_Click(object sender, EventArgs e)
        {
            savelogic();
            int a = Convert.ToInt32(Session["p_id"]);
            if (a != 0 || a == null)
            {

                Response.Redirect("PrintPurchase.aspx?id=" + a, false);
            }
        }



    }
}