using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using IMSBLL.EntityModel;
using IMSBLL.DAL;
using System.Configuration;

namespace IMS
{
    public partial class Rack : System.Web.UI.Page
    {
        /// <summary>
        /// All The objects That are used in coding
        /// </summary>
        #region object
        IMS2Entities context = new IMS2Entities();
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["TestDBConnection"].ConnectionString);
        #endregion
        protected void Page_Load(object sender, EventArgs e)
        {


            try
            {
                if (!IsPostBack)
                {
                    ddlgodownbind();
                    loadDataTable();
                    txtRackName.Focus();
                }
            }

             catch (Exception ex)
            {
               
                ErrorLog.saveerror(ex);
                //Do Logging
            }
            
        }

        /// <summary>
        /// All The Methods That are used in coding
        /// </summary>

        #region Methods
        [System.Web.Services.WebMethod]
        public static string CheckDouble(string useroremail, string g_id)
        {
            try
            {
                if (HttpContext.Current.Session["company_id"] != null)
                {
                    SqlHelper helper = new SqlHelper();
                    DataTable data = helper.checkrackingodwon(useroremail, Convert.ToInt32(g_id), Convert.ToInt32(HttpContext.Current.Session["company_id"]));
                    if (data.Rows.Count > 0)
                    {
                        return "true";
                    }
                    else
                    {
                        return "false";
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
            return "true";
        }

        private string CheckDoubleFromDb(string ValueToCheck)
        {
            return "";
        }
        public void ddlgodownbind()
        {
            int c_id = Convert.ToInt32(Session["company_id"]);
            List<tbl_godown> gd = context.tbl_godown.Where(x => x.status == true && x.company_id == c_id).ToList();

            ddlGodownName.DataTextField = "godown_name";
            ddlGodownName.DataValueField = "godown_id";
            ddlGodownName.DataSource = gd;
            ddlGodownName.DataBind();
            ddlGodownName.Items.Insert(0, new ListItem("--Select Godown--", "0"));
        }
        private void loadDataTable()
        {

            int b_id = Convert.ToInt32(Session["branch_id"]);
            int c_id = Convert.ToInt32(Session["company_id"]);
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "sp_SelectRack";
            cmd.Parameters.AddWithValue("@company_id", c_id);
            cmd.Parameters.AddWithValue("@branch_id", b_id);
            cmd.Connection = con;
            try
            {

                con.Open();
                DataSet ds = new DataSet();
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                GridView1.DataSource = ds.Tables[0];
                GridView1.DataBind();
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
            finally
            {
                con.Close();
                con.Dispose();
            }
        }

        private void savecode()
        {
            try
            {
                if (hd.Value != "true")
                {

                    lblcheckDoubleError.Text = String.Empty;
                    int c_id = Convert.ToInt32(Session["company_id"]);
                    int b_id = Convert.ToInt32(Session["branch_id"]);
                    string User_id = Convert.ToString(Session["UserID"]);
                    tbl_rack rd = new tbl_rack();
                    rd.company_id = c_id;
                    rd.branch_id = b_id;
                    rd.godown_id = Int32.Parse(ddlGodownName.SelectedValue);
                    rd.rack_name = txtRackName.Text;
                    //rd.created_by = "admin";
                    rd.created_by = User_id;
                    rd.created_date = DateTime.Today;
                    rd.status = true;
                    rd.modified_by = "";
                    rd.modified_date = null;
                    rd.Insert(rd);
                    loadDataTable();
                    divalert.Visible = true;
                    lblAlert.Text = "Rack Saved Successfully";
                    clr();


                    //lblError.Text = string.Empty;
                }
                else
                {
                    divalert.Visible = false;
                    lblcheckDoubleError.ForeColor = System.Drawing.Color.Red;
                    lblcheckDoubleError.Text = "This Rack name already Exists";
                    return;
                }

            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }

        }

        private void updatecode()
        {
            try
            {
                if (hd.Value != "true")
                {
                    lblcheckDoubleError.Text = String.Empty;
                    int c_id = Convert.ToInt32(Session["company_id"]);
                    int b_id = Convert.ToInt32(Session["branch_id"]);
                    string User_id = Convert.ToString(Session["UserID"]);
                    GridViewRow row = GridView1.SelectedRow;
                    int rack_id = Convert.ToInt32(row.Cells[3].Text);
                    int godown_id = Int32.Parse(ddlGodownName.SelectedValue);
                    //decimal TaxPercent = decimal.Parse(txtTaxPercent.Text);
                    context.sp_UpdateRack(c_id, b_id, rack_id, godown_id, txtRackName.Text, User_id, DateTime.Today);
                    btnUpdate.Visible = false;
                    btnSave.Visible = true;
                    divalert.Visible = true;
                    lblAlert.Text = "Rack Updated Successfully";
                    ViewState["gridrow"] = 0;
                    loadDataTable();
                    clr();
                }
                else
                {
                    divalert.Visible = false;
                    lblcheckDoubleError.ForeColor = System.Drawing.Color.Red;
                    lblcheckDoubleError.Text = "This Rack name already Exists";
                    return;
                }
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        public void clr()
        {

            txtRackName.Text = string.Empty;
            ddlGodownName.SelectedIndex = 0;
        }

        #endregion
        /// <summary>
        /// All The Events That are used in coding
        /// </summary>

        #region Events
        protected void btnSave_Click(object sender, EventArgs e)
        {
            savecode();
        }

        protected void GridView1_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                lblcheckDoubleError.Text = String.Empty;
                GridViewRow row = GridView1.SelectedRow;
                int rack_id = Convert.ToInt32(GridView1.DataKeys[row.RowIndex].Value);
                //int taxId = GridView1.SelectedIndex;
                ViewState["gridrow"] = 1;
                txtRackName.Text = row.Cells[0].Text;
                ddlGodownName.SelectedValue=row.Cells[2].Text;
                btnSave.Visible = false;
                btnUpdate.Visible = true;
                divalert.Visible = false;
                txtRackName.Focus();
                hd.Value = string.Empty;
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

    

        protected void btnUpdate_Click(object sender, EventArgs e)
        {
            updatecode();
        }

        protected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            try
            {
                if (e.CommandName == "DeleteRow")
                {
                    if (Convert.ToInt32(ViewState["gridrow"]) != 1)
                    {
                     int c_id = Convert.ToInt32(Session["company_id"]);
                    int b_id = Convert.ToInt32(Session["branch_id"]);
                    divalert.Visible = false;
                    ViewState["unit_id"] = Convert.ToInt32(e.CommandArgument);
                    ClientScript.RegisterStartupScript(this.GetType(), "Pop", "openModal();", true);
                    loadDataTable();
                    }
                    else
                    {
                        divalert.Visible = true;
                       
                        lblAlert.Text = "Please Update The rack first";
                    }
                }
            }
             catch (Exception ex)
            {
               
                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void btnYes_Click(object sender, EventArgs e)
        {
            try
            {
                int c_id = Convert.ToInt32(Session["company_id"]);
                int b_id = Convert.ToInt32(Session["branch_id"]);
                int rowIndex = Convert.ToInt32(ViewState["unit_id"]);
                context.sp_DeleteRack(c_id, b_id, rowIndex);
                divalert.Visible = true;
                lblAlert.Text = "Rack Deleted ";
                loadDataTable();
            }
            catch (Exception ex)
            {

                ErrorLog.saveerror(ex);
                //Do Logging
            }
        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                lblcheckDoubleError.Text = String.Empty;
                btnSave.Visible = true;
                btnUpdate.Visible = false;
                divalert.Visible = false;
                clr();
                ViewState["gridrow"] = null;
                hd.Value = string.Empty;
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }
        }



        protected void btnClear_Click(object sender, EventArgs e)
        {
            clr();
        }

        protected void ddlGodownName_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtRackName.Text != null)
                {
                    lblcheckDoubleError.Text = String.Empty;
                    divalert.Visible = false;
                    CheckDouble(txtRackName.Text, ddlGodownName.SelectedValue.ToString());
                }
            }
            catch (Exception ex)
            {
                ErrorLog.saveerror(ex);
            }

        }
        #endregion
    }
}